# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cwUUlz3LRvK1Mk5QEG-Ir8d62VKAzUfp
"""

import pandas as pd
import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
from sklearn.preprocessing import StandardScaler
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Embedding
from tensorflow.keras.layers import GRU

bike = pd.read_csv('bicicletas.csv')
bike.head()

bike['datas'] = pd.to_datetime(bike['datas'])
sns.lineplot(x='datas', y='contagem', data=bike)
plt.xticks(rotation=70)

sc2 = StandardScaler()

sc2.fit(bike['contagem'].values.reshape(-1,1))

y = sc2.transform(bike['contagem'].values.reshape(-1,1))

tamanho_treino = int(len(bike)*0.9)
tamanho_teste = len(bike) - (tamanho_treino)

ytreino = y[0:tamanho_treino]
yteste = y[tamanho_treino:len(bike)]

sns.lineplot(x='datas', y=ytreino[:,0], data=bike[0:tamanho_treino], label='treino')
sns.lineplot(x='datas', y=yteste[:,0], data=bike[tamanho_treino:len(bike)], label='teste')
plt.xticks(rotation=70)

def separa_dados(vetor, n_passos):
  x_novo,y_novo = [], []

  for i in range(n_passos, vetor.shape[0]):
    x_novo.append(list(vetor.loc[i-n_passos:i-1]))
    y_novo.append(vetor.loc[i])
  X_novo, y_novo = np.array(x_novo), np.array(y_novo)
  return x_novo, y_novo

vetor = pd.DataFrame(ytreino)[0]
xtreino_novo, ytreino_novo = separa_dados(vetor, 10)

xtreino_novo

vetor2 = pd.DataFrame(yteste)[0]
xteste_novo, yteste_novo = separa_dados(vetor2, 10)

xtreino_novo = np.array(xtreino_novo)
xteste_novo = np.array(xteste_novo)

xtreino_novo = xtreino_novo.reshape((xtreino_novo.shape[0],xtreino_novo.shape[1],1))
xteste_novo = xteste_novo.reshape((xteste_novo.shape[0], xteste_novo.shape[1],1))

recorrente = Sequential()
recorrente.add(LSTM(128,input_shape=(xtreino_novo.shape[1], xtreino_novo.shape[2])))
recorrente.add(Dense(units=1))

recorrente.compile(loss='mean_squared_error', optimizer='RMSProp')

recorrente.summary()

recorrente.fit(xtreino_novo,ytreino_novo,validation_data=(xteste_novo, yteste_novo), epochs=100)

y_ajustado = recorrente.predict(xtreino_novo)
sns.lineplot(x='datas', y=ytreino[:,0], data=bike[0:tamanho_treino], label='treino')
sns.lineplot(x='datas', y=y_ajustado[:,0], data=bike[0:15662], label='ajuste_treino')
plt.xticks(rotation=70)

y_predito = recorrente.predict(xteste_novo)
 sns.lineplot(x='datas', y=yteste[:,0], data=bike[tamanho_treino:len(bike)], label='teste')
 sns.lineplot(x='datas', y=y_predito[:,0], data=bike[tamanho_treino+10:len(bike)], label='previsão')
 plt.xticks(rotation=70)

recorrente_g = Sequential()
recorrente_g.add(GRU(128,input_shape=(xtreino_novo.shape[1], xtreino_novo.shape[2])))
recorrente_g.add(Dense(units=1))

recorrente_g.compile(loss='mean_squared_error', optimizer='RMSProp')
recorrente.summary()

recorrente_g.summary()

resultado2 = recorrente_g.fit(xtreino_novo,ytreino_novo,validation_data=(xteste_novo,yteste_novo), epochs=100)

y_predito2 = recorrente_g.predict(xteste_novo)
sns.lineplot(x='datas', y=yteste[:,0], data=bike[tamanho_treino:len(bike)], label='previsão')
sns.lineplot(x='datas', y=y_predito2[:,0], data=bike[tamanho_treino+10:len(bike)], label='previsão')
plt.xticks(rotation=70)

print(resultado2.history.keys())
plt.plot(resultado2.history['loss'])
plt.plot(resultado2.history['val_loss'])
plt.legend(['treino', 'teste'])
plt.xlabel('Epochs')
plt.ylabel('Custo')

